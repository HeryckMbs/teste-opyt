Descrição da Atividade:
Desenvolver um aplicativo de controle de gastos pessoais com funcionalidades essenciais de gerenciamento financeiro.

Objetivo:
Criar um aplicativo simples e funcional com foco em organização financeira pessoal, incorporando boas práticas de design, usabilidade e desenvolvimento.

Funcionalidades:
1. Tela de Login
    Autenticação básica com integração a banco de dados (MySQL ou MariaDB).
    Opção de:
        Criar nova conta.
        Realizar login com credenciais existentes.
2. Tela Principal
    Exibição de Transações:
        Lista de transações financeiras do usuário, organizadas por data.
    Exibição de:
        Descrição.
        Categoria.
        Valor.
    Resumo Financeiro:
        Saldo total.
        Total de receitas.
        Total de despesas.
3. Adicionar Transação
    Tela dedicada para inclusão de uma nova transação, com os seguintes campos:
        Data.
        Valor.
        Descrição.
        Seleção de categoria.
    Validações:
        Impedir valores negativos para receitas.
        Tornar valor um campo obrigatório.
4. Filtros e Organização
    Filtros:
        Permitir a filtragem de transações por:
            Período (data inicial e final).
            Categoria.
    Ordenação:
        Opção para ordenar transações por:
            Data.
            Valor.
5. Gráficos
    Apresentar visualizações gráficas:
        Gráfico de barras ou pizza para despesas por categoria.
        Gráfico que mostre a evolução dos gastos ao longo do tempo.
6. Tema Escuro/Claro
    Sistema de alternância entre temas claro e escuro.
    Configuração para seguir as preferências do sistema operacional.
7. Responsividade
    Garantir que o aplicativo seja:
        Totalmente responsivo para smartphones e tablets.
        Compatível com diferentes tamanhos de tela e densidades de pixel.
        
Requisitos Técnicos e Avaliação
1. Organização e Limpeza do Código
Estrutura modular e bem-organizada.
Aplicação de boas práticas no padrão de organização de pastas e arquivos.
2. State Management
Utilizar Provider para gerenciamento do estado global e local do aplicativo.
3. Integração de APIs
Consumir uma API externa (escolha do desenvolvedor).
Implementar:
Uso de async/await.
Tratamento de erros robusto.
4. Boas Práticas de UI e UX
Criação de:
Componentes customizados e reaproveitáveis.
Layouts consistentes com Material Design ou Cupertino Widgets, conforme o contexto.
5. Responsividade
Otimização para:
Diferentes tamanhos de tela.
Densidades de pixel variadas.
6. Tema Claro/Escuro
Implementação nativa do Flutter para gerenciar os temas.